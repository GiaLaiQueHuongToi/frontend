"use client";

import type React from "react";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  ArrowLeft,
  ArrowRight,
  Search,
  Sparkles,
  Wand2,
  Mic,
  Video,
} from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import { RefreshCw, Play, Scissors, Copy, Trash2, Plus, Upload } from "lucide-react";
import {
  geminiService,
  ImageGenerationResult,
  type VideoOutlineRequest,
  type VideoOutlineResponse,
} from "@/services/geminiService";
import Link from "next/link";
import { ImageWithFallback } from "@/components/ui/image-with-fallback";

// Mock trending topics
const trendingTopics = [
  "AI in Education",
  "Sustainable Living",
  "Future of Work",
  "Space Exploration",
  "Health Tech Innovations",
];

export default function CreateVideoPage() {
  const router = useRouter();
  const { toast } = useToast();
  const [currentStep, setCurrentStep] = useState(1);
  const [videoDescription, setVideoDescription] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [topicSource, setTopicSource] = useState("trending");
  const [selectedTopic, setSelectedTopic] = useState("");
  const [targetAudience, setTargetAudience] = useState("");
  const [videoGoal, setVideoGoal] = useState("");
  const [generatedSummary, setGeneratedSummary] = useState("");
  const [videoStyle, setVideoStyle] = useState("");
  const [language, setLanguage] = useState("vietnamese");
  const [voiceType, setVoiceType] = useState("female");
  const [captionStyle, setCaptionStyle] = useState("modern");
  const [isGenerating, setIsGenerating] = useState(false);
  const [isPreviewReady, setIsPreviewReady] = useState(false);
  const [previewUrl, setPreviewUrl] = useState("/placeholder.svg");

  // New state for Gemini integration
  const [videoOutline, setVideoOutline] =
    useState<VideoOutlineResponse | null>(null);
  const [isGeneratingOutline, setIsGeneratingOutline] = useState(false);

  // State for image generation
  const [generatedImages, setGeneratedImages] = useState<
    (ImageGenerationResult & { delay: number })[]
  >([]);
  const [isGeneratingImages, setIsGeneratingImages] = useState(false);
  const [hasAutoGeneratedImages, setHasAutoGeneratedImages] = useState(false);

  // Complete search results data
  const [searchResults, setSearchResults] = useState([
    {
      id: 1,
      title: "AI Tutorial for Beginners",
      thumbnail: "/placeholder-thumbnail.svg",
      views: "1.2M",
    },
    {
      id: 2,
      title: "Machine Learning Explained",
      thumbnail: "/placeholder-thumbnail.svg",
      views: "890K",
    },
    {
      id: 3,
      title: "Future of Artificial Intelligence",
      thumbnail: "/placeholder-thumbnail.svg",
      views: "2.1M",
    },
  ]);

  const [selectedAudiencePreview, setSelectedAudiencePreview] = useState("");
  const [selectedGoalPreview, setSelectedGoalPreview] = useState("");
  const [selectedVoicePreview, setSelectedVoicePreview] = useState("");
  const [selectedCaptionPreview, setSelectedCaptionPreview] = useState("");

  // Complete editing phase data
  const [editingPhase, setEditingPhase] = useState<{
    timeline: Array<{
      id: number;
      type: string;
      content: string;
      duration: number;
    }>;
    selectedElement: number | null;
    playhead: number;
  }>({
    timeline: [
      {
        id: 1,
        type: "image",
        content: "Introduction scene",
        duration: 3,
      },
      { id: 2, type: "image", content: "Main content", duration: 5 },
      { id: 3, type: "image", content: "Conclusion", duration: 2 },
    ],
    selectedElement: null,
    playhead: 0,
  });

  // Generate video outline using Gemini AI
  const generateVideoOutline = async () => {
    if (!selectedTopic && !videoDescription) {
      toast({
        title: "Missing information",
        description:
          "Please select a topic or enter a video title first.",
        variant: "destructive",
      });
      return;
    }

    if (!targetAudience || !videoGoal) {
      toast({
        title: "Missing information",
        description: "Please select target audience and video goal.",
        variant: "destructive",
      });
      return;
    }

    setIsGeneratingOutline(true);

    try {
      const request: VideoOutlineRequest = {
        description: selectedTopic || videoDescription,
        targetAudience: targetAudience,
        videoGoal: videoGoal,
      };

      toast({
        title: "Generating content with Gemini AI",
        description: "Creating your video outline...",
      });

      const outline = await geminiService.generateVideoOutline(request);

      setVideoOutline(outline);
      setGeneratedSummary(outline.contentSummary);

      toast({
        title: "Video outline generated!",
        description: `Created ${outline.scriptSegments.length} segments with ${outline.estimatedDuration}s total duration.`,
      });

      // Auto-advance to next step
      setCurrentStep(3);
    } catch (error) {
      console.error("Error generating outline:", error);
      toast({
        title: "Generation failed",
        description:
          error instanceof Error
            ? error.message
            : "Please try again later.",
        variant: "destructive",
      });
    } finally {
      setIsGeneratingOutline(false);
    }
  };

  // Generate images for script segments
  const generateImagesForScript = async () => {
    if (!videoOutline || !videoOutline.scriptSegments.length) {
      toast({
        title: "Missing script",
        description: "Please generate script content first.",
        variant: "destructive",
      });
      return;
    }

    if (isGeneratingImages) {
      console.log("Already generating images, skipping...");
      return;
    }

    setIsGeneratingImages(true);

    try {
      toast({
        title: "Generating images with Gemini AI",
        description:
          "Creating visual content for each script segment...",
      });

      const videoContext = {
        topic: selectedTopic || videoDescription || "Video content",
        style: videoStyle || "modern",
        targetAudience: targetAudience || "general audience",
      };

      console.log(
        "Starting image generation with context:",
        videoContext
      );
      console.log("Script segments:", videoOutline.scriptSegments.length);

      const imageResults = await geminiService.generateImagesForScript(
        videoOutline.scriptSegments,
        videoContext
      );

      console.log("Image generation completed:", imageResults);
      setGeneratedImages(
        imageResults.map((img, index) => ({
          ...img,
          segmentId: videoOutline.scriptSegments[index].id,
          delay: index * 5000, // Add delay for staggered loading
        }))
      );
      setHasAutoGeneratedImages(true);

      // Verify all images have URLs
      const missingImages = imageResults.filter((img) => !img.imageUrl);
      if (missingImages.length > 0) {
        console.warn("Some images missing URLs:", missingImages);
      }

      toast({
        title: "Images generated successfully!",
        description: `Created ${imageResults.length} image descriptions for your video segments.`,
      });
    } catch (error) {
      console.error("Error generating images:", error);
      toast({
        title: "Image generation failed",
        description:
          error instanceof Error
            ? error.message
            : "Please try again later.",
        variant: "destructive",
      });
    } finally {
      setIsGeneratingImages(false);
    }
  };

  const regenerateScript = async () => {
    if (!selectedTopic && !videoDescription) {
      toast({
        title: "Missing information",
        description: "Please provide a topic or title first.",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);

    try {
      const scriptSections = await geminiService.generateScript(
        selectedTopic || videoDescription,
        targetAudience || "general public",
        videoOutline?.estimatedDuration || 80
      );

      setVideoOutline((prev) => {
        if (!prev) return null;
        return {
          ...prev,
          scriptSegments: scriptSections.scriptSegments,
          estimatedDuration: scriptSections.estimatedDuration,
          keywords: scriptSections.keywords,
        };
      });

      toast({
        title: "Script regenerated!",
        description: "New script content has been generated with AI.",
      });
    } catch (error) {
      console.error("Error regenerating script:", error);
      toast({
        title: "Regeneration failed",
        description: "Please try again later.",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleNextStep = () => {
    if (currentStep === 2) {
      generateVideoOutline();
    } else if (currentStep === 4) {
      // Auto-generate images when moving to step 5 (Voice & Captions)
      setCurrentStep(currentStep + 1);

      // Only auto-generate if we haven't done it before and have script segments
      if (
        videoOutline?.scriptSegments.length &&
        !generatedImages.length &&
        !hasAutoGeneratedImages &&
        !isGeneratingImages
      ) {
        console.log("Auto-generating images for step 5");
        setTimeout(() => {
          generateImagesForScript();
        }, 1000); // Delay for UI transition
      }
    } else if (currentStep === 6) {
      generatePreview();
    } else {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevStep = () => {
    setCurrentStep(currentStep - 1);
  };

  const updateScriptItem = (id: number, newText: string) => {
    setVideoOutline((outline) => {
      if (!outline) return outline;
      return {
        ...outline,
        scriptSegments: outline.scriptSegments.map((segment) =>
          segment.id === id ? { ...segment, text: newText } : segment
        ),
      };
    });
  };

  const generatePreview = () => {
    setIsGenerating(true);
    toast({
      title: "Generating preview",
      description: "This may take a moment...",
    });

    setTimeout(() => {
      setIsPreviewReady(true);
      setIsGenerating(false);
      setCurrentStep(7);
    }, 3000);
  };

  const handleFinish = () => {
    toast({
      title: "Video created successfully!",
      description: "Your video has been saved to your dashboard.",
    });
    router.push("/dashboard");
  };

  // Individual image regeneration
  const regenerateIndividualImage = async (segmentId: number) => {
    if (!videoOutline) return;

    const segment = videoOutline.scriptSegments.find((s) => s.id === segmentId);
    if (!segment) return;

    try {
      toast({
        title: "Regenerating image",
        description: `Creating new image for segment ${segmentId}...`,
      });

      const videoContext = {
        topic: selectedTopic || videoDescription || "Video content",
        style: videoStyle || "modern",
        targetAudience: targetAudience || "general audience",
      };

      const { imageUrl, imagePrompt } = await geminiService.generateImage(
        segment,
        videoContext
      );

      // Update only this specific image
      setGeneratedImages((prev) =>
        prev.map((img) =>
          img.segmentId === segmentId
            ? {
                ...img,
                imageUrl,
                imagePrompt,
                width: 1920,
                height: 1080,
                delay: 0, // Reset delay for regenerated image
              }
            : img
        )
      );

      toast({
        title: "Image regenerated!",
        description: `New image created for segment ${segmentId}.`,
      });
    } catch (error) {
      console.error("Error regenerating individual image:", error);
      toast({
        title: "Regeneration failed",
        description: "Please try again later.",
        variant: "destructive",
      });
    }
  };

  // Handle image upload
  const handleImageUpload = (segmentId: number, file: File) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const result = e.target?.result as string;

      // Update the image with uploaded file
      setGeneratedImages((prev) =>
        prev.map((img) =>
          img.segmentId === segmentId
            ? {
                ...img,
                imageUrl: result,
                imagePrompt: "User uploaded image",
                width: 1920,
                height: 1080,
                delay: 0, // Reset delay for uploaded image
              }
            : img
        )
      );

      toast({
        title: "Image uploaded!",
        description: `Custom image set for segment ${segmentId}.`,
      });
    };
    reader.readAsDataURL(file);
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="space-y-4">
              <Label>Topic Source</Label>
              <RadioGroup
                value={topicSource}
                onValueChange={setTopicSource}
                className="flex flex-col space-y-3"
              >
                <div className="flex items-center space-x-2">
                  <RadioGroupItem
                    value="trending"
                    id="trending"
                  />
                  <Label
                    htmlFor="trending"
                    className="cursor-pointer"
                  >
                    Use AI-generated content
                  </Label>
                </div>

                <div className="flex items-center space-x-2">
                  <RadioGroupItem
                    value="search"
                    id="search"
                  />
                  <Label
                    htmlFor="search"
                    className="cursor-pointer"
                  >
                    Search for a specific topic
                  </Label>
                </div>
              </RadioGroup>
            </div>

            {topicSource === "trending" ? (
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="videoDescription">
                    Video Description
                  </Label>
                  <Textarea
                    id="videoDescription"
                    placeholder="Enter a detailed description for your video. Include the main topic, key points you want to cover, and any specific requirements or preferences."
                    value={videoDescription}
                    onChange={(
                      e: React.ChangeEvent<HTMLTextAreaElement>
                    ) =>
                      setVideoDescription(e.target.value)
                    }
                    rows={5}
                    className="resize-none"
                  />
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label>Select a Trending Topic</Label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {trendingTopics.map((topic, index) => (
                      <div
                        key={topic}
                        className={`p-3 border rounded-md cursor-pointer transition-colors ${selectedTopic === topic
                            ? "border-purple-500 bg-purple-50"
                            : "hover:border-gray-400"
                          }`}
                        onClick={() =>
                          setSelectedTopic(topic)
                        }
                      >
                        <div className="flex items-center gap-3">
                          <div className="w-12 h-12 rounded-md overflow-hidden bg-gray-100 relative">
                            <Image
                              src="/placeholder-small.svg"
                              alt={topic}
                              fill
                              className="object-cover"
                            />
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2">
                              <TrendingUp className="h-4 w-4 text-purple-500" />
                              <span className="font-medium">
                                {topic}
                              </span>
                            </div>
                            <p className="text-xs text-gray-500 mt-1">
                              Trending now
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="searchTopic">
                    Search for a Topic
                  </Label>
                  <div className="flex gap-2">
                    <Input
                      id="searchTopic"
                      placeholder="Enter keywords to search"
                      value={searchQuery}
                      onChange={(
                        e: React.ChangeEvent<HTMLInputElement>
                      ) => setSearchQuery(e.target.value)}
                    />
                    <Button variant="outline" size="icon">
                      <Search className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                {searchQuery && (
                  <div className="space-y-3">
                    <h4 className="font-medium">
                      Search Results Preview
                    </h4>
                    <div className="grid grid-cols-1 gap-3 max-h-60 overflow-y-auto">
                      {searchResults.map((result) => (
                        <div
                          key={result.id}
                          className="flex gap-3 p-3 border rounded-md hover:bg-gray-50 cursor-pointer"
                          onClick={() =>
                            setSelectedTopic(
                              result.title
                            )
                          }
                        >
                          <div className="w-20 h-12 relative rounded overflow-hidden">
                            <Image
                              src={
                                result.thumbnail ||
                                "/placeholder-thumbnail.svg"
                              }
                              alt={result.title}
                              fill
                              className="object-cover"
                            />
                          </div>
                          <div className="flex-1">
                            <h5 className="font-medium text-sm">
                              {result.title}
                            </h5>
                            <p className="text-xs text-gray-500">
                              {result.views} views
                            </p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="targetAudience">
                Target Audience
              </Label>
              <Select
                value={targetAudience}
                onValueChange={(value: string) => {
                  setTargetAudience(value);
                  setSelectedAudiencePreview(value);
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select your target audience" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="general">
                    General Public
                  </SelectItem>
                  <SelectItem value="students">
                    Students
                  </SelectItem>
                  <SelectItem value="professionals">
                    Professionals
                  </SelectItem>
                  <SelectItem value="educators">
                    Educators
                  </SelectItem>
                  <SelectItem value="enthusiasts">
                    Tech Enthusiasts
                  </SelectItem>
                </SelectContent>
              </Select>

              {selectedAudiencePreview && (
                <div className="mt-3 p-3 bg-blue-50 rounded-lg">
                  <h4 className="font-medium mb-2">
                    Audience Preview
                  </h4>
                  <div className="flex items-center gap-3">
                    <img
                      src="/placeholder-avatar.svg"
                      alt={selectedAudiencePreview}
                      className="w-15 h-15 rounded-full"
                    />
                    <div>
                      <p className="font-medium capitalize">
                        {selectedAudiencePreview}
                      </p>
                      <p className="text-sm text-gray-600">
                        {selectedAudiencePreview ===
                          "students" &&
                          "Young learners seeking educational content"}
                        {selectedAudiencePreview ===
                          "professionals" &&
                          "Working adults looking for industry insights"}
                        {selectedAudiencePreview ===
                          "general" &&
                          "Broad audience with diverse interests"}
                        {selectedAudiencePreview ===
                          "educators" &&
                          "Teachers and educational professionals"}
                        {selectedAudiencePreview ===
                          "enthusiasts" &&
                          "Tech-savvy individuals passionate about innovation"}
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="videoGoal">Video Goal</Label>
              <Select
                value={videoGoal}
                onValueChange={(value: string) => {
                  setVideoGoal(value);
                  setSelectedGoalPreview(value);
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select the main goal of your video" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="educate">
                    Educate & Inform
                  </SelectItem>
                  <SelectItem value="entertain">
                    Entertain
                  </SelectItem>
                  <SelectItem value="inspire">
                    Inspire & Motivate
                  </SelectItem>
                  <SelectItem value="explain">
                    Explain a Concept
                  </SelectItem>
                  <SelectItem value="promote">
                    Promote an Idea
                  </SelectItem>
                </SelectContent>
              </Select>

              {selectedGoalPreview && (
                <div className="mt-3 p-3 bg-green-50 rounded-lg">
                  <h4 className="font-medium mb-2">
                    Goal Preview
                  </h4>
                  <div className="flex items-center gap-3">
                    <div className="w-12 h-12 rounded-full bg-green-100 flex items-center justify-center">
                      {selectedGoalPreview ===
                        "educate" && "📚"}
                      {selectedGoalPreview ===
                        "entertain" && "🎭"}
                      {selectedGoalPreview ===
                        "inspire" && "✨"}
                      {selectedGoalPreview ===
                        "explain" && "💡"}
                      {selectedGoalPreview ===
                        "promote" && "📢"}
                    </div>
                    <div>
                      <p className="font-medium capitalize">
                        {selectedGoalPreview}
                      </p>
                      <p className="text-sm text-gray-600">
                        {selectedGoalPreview ===
                          "educate" &&
                          "Focus on teaching and knowledge sharing"}
                        {selectedGoalPreview ===
                          "entertain" &&
                          "Create engaging and fun content"}
                        {selectedGoalPreview ===
                          "inspire" &&
                          "Motivate and uplift your audience"}
                        {selectedGoalPreview ===
                          "explain" &&
                          "Break down complex topics simply"}
                        {selectedGoalPreview ===
                          "promote" &&
                          "Advocate for ideas and concepts"}
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {videoOutline && (
              <div className="mt-4 p-4 bg-purple-50 rounded-lg">
                <h4 className="font-medium mb-2 flex items-center gap-2">
                  <Sparkles className="h-4 w-4 text-purple-600" />
                  AI-Generated Insights
                </h4>
                <div className="space-y-2 text-sm">
                  <p>
                    <strong>Estimated Duration:</strong>{" "}
                    {videoOutline.estimatedDuration} seconds
                  </p>
                  <p>
                    <strong>Segments:</strong>{" "}
                    {videoOutline.scriptSegments.length}
                  </p>
                  <p>
                    <strong>Keywords:</strong>{" "}
                    {videoOutline.keywords.join(", ")}
                  </p>
                </div>
              </div>
            )}

            <Button
              className="w-full gap-2"
              onClick={generateVideoOutline}
              disabled={
                isGeneratingOutline ||
                !targetAudience ||
                !videoGoal ||
                (!selectedTopic && !videoDescription)
              }
            >
              <Wand2 className="h-4 w-4" />
              {isGeneratingOutline
                ? "Generating with Gemini AI..."
                : "Generate Video Outline"}
            </Button>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="summary">Content Summary</Label>
              <div className="flex items-center gap-2 mb-2 text-sm text-purple-600">
                <Sparkles className="h-4 w-4" />
                <span>AI-generated summary</span>
              </div>
              <Textarea
                id="summary"
                placeholder="Content summary will appear here"
                value={generatedSummary}
                onChange={(
                  e: React.ChangeEvent<HTMLTextAreaElement>
                ) => setGeneratedSummary(e.target.value)}
                rows={4}
                className="resize-none"
              />
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label>Script Sections</Label>
                <div className="flex items-center gap-2">
                  <div className="flex items-center gap-2 text-sm text-purple-600">
                    <Sparkles className="h-4 w-4" />
                    <span>AI-generated script</span>
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={regenerateScript}
                    disabled={isGenerating}
                    className="gap-1"
                  >
                    <RefreshCw className="h-3 w-3" />
                    {isGenerating
                      ? "Regenerating..."
                      : "Regenerate"}
                  </Button>
                </div>
              </div>

              <ScrollArea className="h-80 border rounded-lg p-4">
                <div className="space-y-4">
                  {videoOutline?.scriptSegments.map(
                    (section, index) => (
                      <div
                        key={section.id}
                        className="space-y-2"
                      >
                        <div className="flex items-center justify-between">
                          <Label
                            htmlFor={`section-${section.id}`}
                            className="text-sm font-medium text-gray-700"
                          >
                            Section {section.id}
                          </Label>
                          {videoOutline
                            ?.scriptSegments[
                            section.id - 1
                          ] && (
                              <Badge
                                variant="secondary"
                                className="text-xs"
                              >
                                {
                                  videoOutline
                                    .scriptSegments[
                                    section.id -
                                    1
                                  ].start
                                }{" "}
                                -{" "}
                                {
                                  videoOutline
                                    .scriptSegments[
                                    section.id -
                                    1
                                  ].end
                                }
                                s
                              </Badge>
                            )}
                        </div>
                        <Textarea
                          id={`section-${section.id}`}
                          value={section.text}
                          onChange={(
                            e: React.ChangeEvent<HTMLTextAreaElement>
                          ) =>
                            updateScriptItem(
                              section.id,
                              e.target.value
                            )
                          }
                          rows={3}
                          className="resize-none text-sm"
                          placeholder={`Enter content for section ${section.id}...`}
                        />
                        {index <
                          videoOutline.scriptSegments
                            .length -
                          1 && (
                            <Separator className="my-3" />
                          )}
                      </div>
                    )
                  )}
                </div>
              </ScrollArea>
            </div>

            {videoOutline && (
              <div className="mt-4 p-4 bg-gray-50 rounded-lg border">
                <h4 className="font-medium mb-3">
                  Video Outline Summary
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div className="space-y-2">
                    <p>
                      <strong>Total Duration:</strong>{" "}
                      {videoOutline.estimatedDuration}s
                    </p>
                    <p>
                      <strong>Segments:</strong>{" "}
                      {videoOutline.scriptSegments.length}
                    </p>
                  </div>
                  <div className="space-y-2">
                    <p>
                      <strong>Keywords:</strong>
                    </p>
                    <ScrollArea className="h-16">
                      <div className="flex flex-wrap gap-1">
                        {videoOutline.keywords.map(
                          (keyword, index) => (
                            <Badge
                              key={index}
                              variant="outline"
                              className="text-xs"
                            >
                              {keyword}
                            </Badge>
                          )
                        )}
                      </div>
                    </ScrollArea>
                  </div>
                </div>
              </div>
            )}
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div className="space-y-2">
              <Label>Video Style</Label>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                {[
                  {
                    id: "minimalist",
                    name: "Minimalist",
                    desc: "Clean design with simple visuals",
                    color: "bg-gray-100",
                  },
                  {
                    id: "dynamic",
                    name: "Dynamic",
                    desc: "Energetic with motion graphics",
                    color: "bg-purple-100",
                  },
                  {
                    id: "educational",
                    name: "Educational",
                    desc: "Focus on clarity and information",
                    color: "bg-blue-100",
                  },
                  {
                    id: "storytelling",
                    name: "Storytelling",
                    desc: "Narrative-focused with emotional appeal",
                    color: "bg-green-100",
                  },
                ].map((style) => (
                  <div
                    key={style.id}
                    className={`p-4 border rounded-md cursor-pointer transition-colors ${videoStyle === style.id
                        ? "border-purple-500 bg-purple-50"
                        : "hover:border-gray-400"
                      }`}
                    onClick={() => setVideoStyle(style.id)}
                  >
                    <div className="flex flex-col items-center gap-2 text-center">
                      <div
                        className={`w-full aspect-video ${style.color} flex items-center justify-center rounded-md relative overflow-hidden`}
                      >
                        <div className="absolute inset-0 flex items-center justify-center">
                          <div className="text-xs font-medium text-gray-600">
                            {style.name} Preview
                          </div>
                        </div>
                        {style.id === "minimalist" && (
                          <div className="absolute bottom-2 left-2 w-8 h-1 bg-gray-400 rounded"></div>
                        )}
                        {style.id === "dynamic" && (
                          <div className="absolute top-2 right-2 w-4 h-4 bg-purple-400 rounded-full animate-pulse"></div>
                        )}
                        {style.id === "educational" && (
                          <div className="absolute bottom-2 left-2 text-xs bg-blue-200 px-2 py-1 rounded">
                            Info
                          </div>
                        )}
                        {style.id ===
                          "storytelling" && (
                            <div className="absolute bottom-2 right-2 w-6 h-1 bg-green-400 rounded"></div>
                          )}
                      </div>
                      <span className="font-medium">
                        {style.name}
                      </span>
                      <span className="text-xs text-gray-500">
                        {style.desc}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-base font-medium">
                    Visual Content Generation
                  </Label>
                  <p className="text-sm text-gray-600 mt-1">
                    Generate AI-powered images for each
                    script segment
                  </p>
                </div>
              </div>

              {generatedImages.length > 0 && (
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <h4 className="font-medium flex items-center gap-2">
                      <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                      Generated Images (
                      {generatedImages.length})
                    </h4>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                          console.log(
                            "Generated images debug info:"
                          );
                          generatedImages.forEach(
                            (img, idx) => {
                              console.log(
                                `Image ${idx + 1
                                } (Segment ${img.segmentId
                                }):`,
                                {
                                  url: img.imageUrl,
                                  prompt: img.imagePrompt,
                                  script: img.scriptText,
                                  isPollinations:
                                    img.imageUrl.includes(
                                      "pollinations"
                                    ),
                                  isPicsum:
                                    img.imageUrl.includes(
                                      "picsum"
                                    ),
                                  isPlaceholder:
                                    img.imageUrl.includes(
                                      "placeholder"
                                    ),
                                }
                              );

                              // Test if URL is accessible
                              if (
                                img.imageUrl.includes(
                                  "pollinations"
                                )
                              ) {
                                fetch(
                                  img.imageUrl,
                                  {
                                    method: "HEAD",
                                    mode: "no-cors",
                                  }
                                )
                                  .then(() =>
                                    console.log(
                                      `✓ Pollinations URL ${idx +
                                      1
                                      } appears accessible`
                                    )
                                  )
                                  .catch(
                                    (err) =>
                                      console.log(
                                        `✗ Pollinations URL ${idx +
                                        1
                                        } error:`,
                                        err
                                      )
                                  );
                              }
                            }
                          );
                        }}
                      >
                        Debug Images
                      </Button>
                    </div>
                  </div>
                  <div className="text-xs text-gray-600 bg-blue-50 p-2 rounded">
                    💡 AI images load with 2-second delays to avoid rate limits. Each image will appear progressively.
                  </div>
                  <ScrollArea className="h-80 border rounded-lg p-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {generatedImages.map(
                        (image, index) => (
                          <div
                            key={`${image.imageUrl}-${image.segmentId}`}
                            className="border rounded-lg bg-white shadow-sm overflow-hidden"
                          >
                            <div className="aspect-video relative bg-gray-100">
                              <ImageWithFallback
                                src={
                                  image.imageUrl
                                }
                                alt={`Segment ${image.segmentId}: ${image.scriptText}`}
                                segmentId={
                                  image.segmentId
                                }
                                loadDelay={image.delay} // 5 second delay between each image
                              />
                              <div className="absolute top-2 right-2 bg-black/70 text-white px-2 py-1 rounded text-xs font-medium">
                                #
                                {
                                  image.segmentId
                                }
                              </div>
                              <div className="absolute bottom-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-xs">
                                {image.imageUrl.includes(
                                  "pollinations"
                                )
                                  ? "AI"
                                  : image.imageUrl.includes(
                                    "picsum"
                                  )
                                    ? "Stock"
                                    : image.imageUrl.includes(
                                      "placeholder"
                                    )
                                      ? "Placeholder"
                                      : "Unknown"}
                              </div>
                            </div>
                            <div className="p-3 space-y-2">
                              <div className="text-sm font-medium text-gray-800 line-clamp-2">
                                "
                                {
                                  image.scriptText
                                }
                                "
                              </div>
                              <div className="text-xs text-gray-500 bg-gray-50 p-2 rounded">
                                <strong>
                                  Prompt:
                                </strong>{" "}
                                {
                                  image.imagePrompt
                                }
                              </div>
                              <div className="text-xs text-gray-400 space-y-1">
                                <div>
                                  {
                                    image.width
                                  }{" "}
                                  ×{" "}
                                  {
                                    image.height
                                  }
                                  px
                                </div>
                                <div
                                  className="font-mono text-xs bg-gray-100 p-1 rounded truncate"
                                  title={
                                    image.imageUrl
                                  }
                                >
                                  {image
                                    .imageUrl
                                    .length >
                                    50
                                    ? image.imageUrl.substring(
                                      0,
                                      50
                                    ) +
                                    "..."
                                    : image.imageUrl}
                                </div>
                              </div>
                              <div className="flex gap-2 pt-2">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => regenerateIndividualImage(image.segmentId)}
                                  className="flex-1 text-xs"
                                >
                                  <RefreshCw className="w-3 h-3 mr-1" />
                                  Regenerate
                                </Button>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => {
                                    const input = document.createElement('input');
                                    input.type = 'file';
                                    input.accept = 'image/*';
                                    input.onchange = (e) => {
                                      const file = (e.target as HTMLInputElement).files?.[0];
                                      if (file) {
                                        handleImageUpload(image.segmentId, file);
                                      }
                                    };
                                    input.click();
                                  }}
                                  className="flex-1 text-xs"
                                >
                                  <Upload className="w-3 h-3 mr-1" />
                                  Upload
                                </Button>
                              </div>
                            </div>
                          </div>
                        )
                      )}
                    </div>
                  </ScrollArea>
                </div>
              )}

              {isGeneratingImages && (
                <div className="flex items-center justify-center p-8 border rounded-lg bg-purple-50">
                  <div className="text-center space-y-2">
                    <div className="animate-spin w-8 h-8 border-2 border-purple-500 border-t-transparent rounded-full mx-auto"></div>
                    <p className="text-sm text-purple-600">
                      Gemini AI is generating visual
                      content for your script segments...
                    </p>
                  </div>
                </div>
              )}
            </div>

            <Button
              className="w-full gap-2"
              onClick={handleNextStep}
            >
              <ArrowRight className="h-4 w-4" />
              Continue to Editing
            </Button>
          </div>
        );

      case 6:
        return (
          <div className="space-y-6">
            <div className="space-y-2">
              <Label>Language</Label>
              <div className="flex gap-4">
                <RadioGroup
                  value={language}
                  onValueChange={setLanguage}
                  className="flex gap-4"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem
                      value="vietnamese"
                      id="vietnamese"
                    />
                    <Label htmlFor="vietnamese">
                      Vietnamese
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem
                      value="english"
                      id="english"
                    />
                    <Label htmlFor="english">English</Label>
                  </div>
                </RadioGroup>
              </div>
            </div>

            <div className="space-y-2">
              <Label>Voice Type</Label>
              <RadioGroup
                value={voiceType}
                onValueChange={(value: string) => {
                  setVoiceType(value);
                  setSelectedVoicePreview(value);
                }}
                className="flex gap-4"
              >
                <div className="flex items-center space-x-2">
                  <RadioGroupItem
                    value="female"
                    id="female"
                  />
                  <Label htmlFor="female">Female</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="male" id="male" />
                  <Label htmlFor="male">Male</Label>
                </div>
              </RadioGroup>

              {selectedVoicePreview && (
                <div className="mt-3 p-3 bg-purple-50 rounded-lg">
                  <h4 className="font-medium mb-2">
                    Voice Preview
                  </h4>
                  <div className="flex items-center gap-3">
                    <div className="w-12 h-12 rounded-full bg-purple-100 flex items-center justify-center">
                      {selectedVoicePreview === "female"
                        ? "👩"
                        : "👨"}
                    </div>
                    <div className="flex-1">
                      <p className="font-medium capitalize">
                        {selectedVoicePreview} Voice
                      </p>
                      <div className="flex items-center gap-2 mt-1">
                        <Button
                          variant="outline"
                          size="sm"
                          className="gap-1"
                        >
                          <Play className="h-3 w-3" />
                          Play Sample
                        </Button>
                        <div className="flex-1 h-1 bg-gray-200 rounded">
                          <div className="w-1/3 h-full bg-purple-400 rounded"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label>Upload Custom Audio</Label>
                <Switch id="custom-audio" />
              </div>
              <div className="flex items-center gap-2 p-4 border border-dashed rounded-md bg-gray-50 cursor-pointer">
                <Mic className="h-5 w-5 text-gray-400" />
                <span className="text-sm text-gray-500">
                  Click to upload or record audio
                </span>
              </div>
            </div>

            <div className="space-y-2">
              <Label>Caption Style</Label>
              <Select
                value={captionStyle}
                onValueChange={(value: string) => {
                  setCaptionStyle(value);
                  setSelectedCaptionPreview(value);
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select caption style" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="modern">
                    Modern
                  </SelectItem>
                  <SelectItem value="classic">
                    Classic
                  </SelectItem>
                  <SelectItem value="minimal">
                    Minimal
                  </SelectItem>
                  <SelectItem value="bold">Bold</SelectItem>
                </SelectContent>
              </Select>

              {selectedCaptionPreview && (
                <div className="mt-3 p-4 bg-gray-900 rounded-lg relative">
                  <h4 className="text-white font-medium mb-3">
                    Caption Preview
                  </h4>
                  <div className="relative">
                    <div className="w-full aspect-video relative rounded overflow-hidden">
                      <Image
                        src="/placeholder.svg"
                        alt="Video preview"
                        fill
                        className="object-cover"
                      />
                    </div>
                    <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2">
                      {selectedCaptionPreview ===
                        "modern" && (
                          <div className="bg-white/90 text-black px-3 py-1 rounded-full text-sm font-medium">
                            Modern Caption Style
                          </div>
                        )}
                      {selectedCaptionPreview ===
                        "classic" && (
                          <div className="bg-black/80 text-white px-3 py-1 text-sm">
                            Classic Caption Style
                          </div>
                        )}
                      {selectedCaptionPreview ===
                        "minimal" && (
                          <div className="text-white text-sm font-light">
                            Minimal Caption Style
                          </div>
                        )}
                      {selectedCaptionPreview ===
                        "bold" && (
                          <div className="bg-yellow-400 text-black px-3 py-1 text-sm font-bold uppercase">
                            BOLD CAPTION STYLE
                          </div>
                        )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        );

      case 7:
        return (
          <div className="space-y-6">
            <div className="text-center mb-4">
              <h3 className="text-lg font-semibold">
                Video Editor
              </h3>
              <p className="text-sm text-gray-500">
                Edit your video like a pro
              </p>
            </div>

            {/* Video Preview */}
            <div className="aspect-video bg-gray-900 rounded-md overflow-hidden relative">
              <Image
                src={previewUrl || "/placeholder.svg"}
                alt="Video preview"
                fill
                className="object-cover"
              />
              <div className="absolute bottom-4 left-4 right-4">
                <div className="bg-black/50 rounded-lg p-3">
                  <div className="flex items-center gap-2 mb-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      className="text-white hover:bg-white/20"
                    >
                      <Play className="h-4 w-4" />
                    </Button>
                    <div className="flex-1 h-1 bg-white/30 rounded">
                      <div
                        className="h-full bg-white rounded transition-all duration-300"
                        style={{
                          width: `${(editingPhase.playhead /
                              10) *
                            100
                            }%`,
                        }}
                      ></div>
                    </div>
                    <span className="text-white text-xs">
                      0:10
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Timeline */}
            <div className="space-y-3">
              <Label>Timeline</Label>
              <div className="bg-gray-100 p-4 rounded-lg">
                <div className="flex gap-2 mb-3">
                  {editingPhase.timeline.map((item) => (
                    <div
                      key={item.id}
                      className={`flex-1 h-12 rounded border-2 cursor-pointer transition-colors ${editingPhase.selectedElement ===
                          item.id
                          ? "border-purple-500 bg-purple-50"
                          : "border-gray-300 bg-white hover:border-gray-400"
                        }`}
                      onClick={() =>
                        setEditingPhase({
                          ...editingPhase,
                          selectedElement: item.id,
                        })
                      }
                    >
                      <div className="p-2 h-full flex flex-col justify-between">
                        <div className="text-xs font-medium truncate">
                          {item.content}
                        </div>
                        <div className="text-xs text-gray-500">
                          {item.duration}s
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Editing Controls */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    className="gap-1"
                  >
                    <Scissors className="h-3 w-3" />
                    Split
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="gap-1"
                  >
                    <Copy className="h-3 w-3" />
                    Duplicate
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="gap-1"
                  >
                    <Trash2 className="h-3 w-3" />
                    Delete
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="gap-1"
                  >
                    <Plus className="h-3 w-3" />
                    Add Scene
                  </Button>
                </div>
              </div>
            </div>

            {/* Editing Options */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm">
                    Visual Effects
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="space-y-2">
                    <Label className="text-xs">
                      Transition
                    </Label>
                    <Select defaultValue="fade">
                      <SelectTrigger className="h-8">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="fade">
                          Fade
                        </SelectItem>
                        <SelectItem value="slide">
                          Slide
                        </SelectItem>
                        <SelectItem value="zoom">
                          Zoom
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label className="text-xs">
                      Filter
                    </Label>
                    <div className="grid grid-cols-3 gap-1">
                      {[
                        "None",
                        "Vintage",
                        "B&W",
                        "Warm",
                        "Cool",
                        "Bright",
                      ].map((filter) => (
                        <Button
                          key={filter}
                          variant="outline"
                          size="sm"
                          className="text-xs h-8"
                        >
                          {filter}
                        </Button>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-3">
                  <CardTitle className="text-sm">
                    Audio Settings
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="space-y-2">
                    <Label className="text-xs">
                      Voice Volume
                    </Label>
                    <Slider
                      defaultValue={[80]}
                      max={100}
                      step={1}
                      className="w-full"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label className="text-xs">
                      Background Music
                    </Label>
                    <div className="flex items-center gap-2">
                      <Switch
                        id="bg-music"
                        defaultChecked
                      />
                      <Label
                        htmlFor="bg-music"
                        className="text-xs"
                      >
                        Enable
                      </Label>
                    </div>
                    <Slider
                      defaultValue={[30]}
                      max={100}
                      step={1}
                      className="w-full"
                    />
                  </div>
                </CardContent>
              </Card>
            </div>

            <Button
              className="w-full gap-2"
              onClick={generatePreview}
              disabled={isGenerating}
            >
              <Video className="h-4 w-4" />
              {isGenerating
                ? "Generating..."
                : "Generate Final Preview"}
            </Button>
          </div>
        );

      case 8:
        return (
          <div className="space-y-6">
            <div className="aspect-video bg-gray-900 rounded-md overflow-hidden relative">
              <Image
                src={previewUrl || "/placeholder.svg"}
                alt="Video preview"
                fill
                className="object-cover"
              />
            </div>

            <div className="space-y-4">
              <div>
                <Label className="mb-2 block">
                  Adjust Voice Speed
                </Label>
                <Slider
                  defaultValue={[50]}
                  max={100}
                  step={1}
                />
              </div>

              <div>
                <Label className="mb-2 block">
                  Caption Size
                </Label>
                <Slider
                  defaultValue={[50]}
                  max={100}
                  step={1}
                />
              </div>

              <div className="flex items-center space-x-2">
                <Switch id="background-music" />
                <Label htmlFor="background-music">
                  Add Background Music
                </Label>
              </div>
            </div>

            <Button className="w-full" onClick={handleFinish}>
              Create Final Video
            </Button>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto p-6">
        <div className="mb-6">
          <Link
            href="/dashboard"
            className="flex items-center gap-2 text-gray-600 hover:text-purple-600 mb-4 transition-colors"
          >
            <ArrowLeft className="h-4 w-4" />
            <span>Back to Dashboard</span>
          </Link>
          <h1 className="text-3xl font-bold">Create New Video</h1>
          <p className="text-gray-600">
            Follow the steps to create your AI-powered short video
          </p>
        </div>

        <div className="max-w-4xl mx-auto">
          {/* Progress indicator */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm text-gray-600">
                Step {currentStep} of 8
              </span>
              <span className="text-sm text-gray-600">
                {Math.round((currentStep / 8) * 100)}% Complete
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-gradient-to-r from-purple-500 to-purple-600 h-2 rounded-full transition-all duration-500"
                style={{ width: `${(currentStep / 8) * 100}%` }}
              ></div>
            </div>
          </div>

          <Card className="shadow-lg border-0">
            <CardHeader className="bg-gradient-to-r from-purple-50 to-blue-50">
              <CardTitle className="text-xl">
                {currentStep === 1 && "Basic Information"}
                {currentStep === 2 && "Audience & Goals"}
                {currentStep === 3 && "Content & Script"}
                {currentStep === 4 && "Video Style"}
                {currentStep === 5 && "Visual Content"}
                {currentStep === 6 && "Voice & Captions"}
                {currentStep === 7 && "Video Editing"}
                {currentStep === 8 && "Preview & Finalize"}
              </CardTitle>
              <CardDescription className="text-gray-600">
                {currentStep === 1 &&
                  "Enter your video description and choose a topic"}
                {currentStep === 2 &&
                  "Define your target audience and video goals"}
                {currentStep === 3 &&
                  "Review and edit the AI-generated content"}
                {currentStep === 4 &&
                  "Choose the visual style for your video"}
                {currentStep === 5 && "Select images and video clips"}
                {currentStep === 6 &&
                  "Configure voice and caption settings"}
                {currentStep === 7 &&
                  "Edit your video with professional tools"}
                {currentStep === 8 &&
                  "Preview your video and make final adjustments"}
              </CardDescription>
            </CardHeader>
            <CardContent className="p-6">
              {renderStepContent()}
            </CardContent>
            <CardFooter className="flex justify-between bg-gray-50 px-6 py-4">
              <Button
                variant="outline"
                onClick={handlePrevStep}
                disabled={currentStep === 1}
                className="gap-2"
              >
                <ArrowLeft className="h-4 w-4" />
                Previous
              </Button>
              <Button
                onClick={handleNextStep}
                disabled={
                  (currentStep === 1 &&
                    !videoDescription &&
                    !selectedTopic) ||
                  (currentStep === 2 &&
                    (!targetAudience || !videoGoal)) ||
                  (currentStep === 4 && !videoStyle) ||
                  (currentStep === 5 && !language) ||
                  isGenerating ||
                  isGeneratingOutline ||
                  isGeneratingImages
                }
                className="gap-2"
              >
                {currentStep === 7 ? "Finish" : "Next"}
                <ArrowRight className="h-4 w-4" />
              </Button>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  );
}

// Simple TrendingUp icon component
function TrendingUp(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="22,7 13.5,15.5 8.5,10.5 2,17" />
      <polyline points="16,7 22,7 22,13" />
    </svg>
  );
}